from unittest import TestCase
import src.point as point
import numpy as np
import src.segment as segment
import src.polygon as polygon
import src.vertex as vertex
import src.cutter as cutter



class TestConvexCutter(TestCase):
    def test_CutterMethods(self):
        points = []
        vertices=[]
        v0=vertex.Vertex()
        p0 = point.Point()
        p0.setcoordinate(1, 1)
        v0.setPoint(0,p0)
        points.append(p0)
        vertices.append(v0)

        v1 = vertex.Vertex()
        p1 = point.Point()
        p1.setcoordinate(5, 1)
        v1.setPoint(1,p1)
        vertices.append(v1)
        points.append(p1)

        v2 = vertex.Vertex()
        p2 = point.Point()
        p2.setcoordinate(5, 3.1)
        v2.setPoint(2,p2)
        vertices.append(v2)
        points.append(p2)

        v3 = vertex.Vertex()
        p3 = point.Point()
        p3.setcoordinate(1, 3.1)
        v3.setPoint(3,p3)
        vertices.append(v3)
        points.append(p3)
        s1 = point.Point()
        s1.setcoordinate(2, 2.1)
        s2 = point.Point()
        s2.setcoordinate(4, 3)
        testCut = segment.Segment()
        testCut.setFromPoint(s1, s2)
        testPolygon = polygon.Polygon(vertices)

        test = cutter.ConvexCutter()
        try:
            test.setCutter(points, vertices, testCut)
            self.assertEqual(testCut.getFrom(), test.getCut().getFrom())
            self.assertEqual(testCut.getTo(), test.getCut().getTo())
            tester=test.getPolygon(0)
            #self.assertEqual(tester, testPolygon)
            for i in range(0,tester.numberVertices()-1):
                self.assertEqual(tester.getVertex(i), testPolygon.getVertex(i))
        except Exception as ex:
            self.fail()



    def test_set_tolerance(self):
        test = cutter.ConvexCutter()
        try:
            test.setTolerance(0.0000000001)
            self.assertEqual(test.getTolerance(), 0.0000000001)
        except Exception as ex:
            self.fail()



class TestConcaveCutter(TestCase):
    def test_concaveCutter(self):
        points = []
        vertices = []
        sbagliato=[]
        v0 = vertex.Vertex()
        p0 = point.Point()
        p0.setcoordinate(1, 1)
        v0.setPoint(0, p0)
        points.append(p0)
        vertices.append(v0)

        v1 = vertex.Vertex()
        p1 = point.Point()
        p1.setcoordinate(5, 1)
        v1.setPoint(1, p1)
        vertices.append(v1)
        points.append(p1)

        v2 = vertex.Vertex()
        p2 = point.Point()
        p2.setcoordinate(5, 3.1)
        v2.setPoint(2, p2)
        vertices.append(v2)
        points.append(p2)

        v3 = vertex.Vertex()
        p3 = point.Point()
        p3.setcoordinate(1, 3.1)
        v3.setPoint(3, p3)
        vertices.append(v3)
        points.append(p3)
        s1 = point.Point()
        s1.setcoordinate(2, 2.1)
        s2 = point.Point()
        s2.setcoordinate(4, 3)
        testCut = segment.Segment()
        testCut.setFromPoint(s1, s2)
        testPolygon = polygon.Polygon(vertices)
        sbagliato.append(v0)
        sbagliato.append(v1)
        sbagliato.append(v2)
        vs=vertex.Vertex()
        vs.setVertex(3,5,5)
        sbagliato.append(vs)
        testSbagliato=polygon.Polygon(sbagliato)

        test = cutter.ConcaveCutter()
        try:
            test.setCutter(points, vertices, testCut)
            self.assertEqual(testCut.getFrom(), test.getCut().getFrom())
            self.assertEqual(testCut.getTo(), test.getCut().getTo())
            self.assertEqual(test.searchPolygon(testPolygon), True)
            self.assertEqual(test.searchPolygon(testSbagliato), False)
        except Exception as ex:
            self.fail()

    def testCutterFigure1(self):
        test = []
        vertices=[]
        p = point.Point()
        p.setcoordinate(1, 1)
        test.append(p)
        p = point.Point()
        p.setcoordinate(5, 1)
        test.append(p)
        p = point.Point()
        p.setcoordinate(5, 3.1)
        test.append(p)
        p = point.Point()
        p.setcoordinate(1, 3.1)
        test.append(p)
        for i in range (0, len(test)):
            v=vertex.Vertex()
            v.setPoint(i,test[i])
            vertices.append(v)
        verticiS = []
        v = vertex.Vertex()
        v.setPoint(0, test[0])
        verticiS.append(v)
        p = point.Point()
        p.setcoordinate(1.7777777777777781, 1.0)
        v = vertex.Vertex()
        v.setPoint(4, p)
        verticiS.append(v)
        p = point.Point()
        p.setcoordinate(2, 1.2)
        v = vertex.Vertex()
        v.setPoint(5, p)
        verticiS.append(v)
        p = point.Point()
        p.setcoordinate(4,3)
        v = vertex.Vertex()
        v.setPoint(6, p)
        verticiS.append(v)
        p = point.Point()
        p.setcoordinate(4.111111111111111,3.10000)
        v = vertex.Vertex()
        v.setPoint(7, p)
        verticiS.append(v)
        v = vertex.Vertex()
        v.setPoint(3, test[3])
        verticiS.append(v)
        verticiD = []
        p = point.Point()
        p.setcoordinate(4, 3)
        v = vertex.Vertex()
        v.setPoint(6, p)
        verticiD.append(v)
        p = point.Point()
        p.setcoordinate(2, 1.2)
        v = vertex.Vertex()
        v.setPoint(5, p)
        verticiD.append(v)
        p = point.Point()
        p.setcoordinate(1.7777777777777781, 1.0)
        v = vertex.Vertex()
        v.setPoint(4, p)
        verticiD.append(v)
        v = vertex.Vertex()
        v.setPoint(1, test[1])
        verticiD.append(v)
        v = vertex.Vertex()
        v.setPoint(2, test[2])
        verticiD.append(v)
        p = point.Point()
        p.setcoordinate(4.111111111111111,3.10000)
        v = vertex.Vertex()
        v.setPoint(7, p)
        verticiD.append(v)

        testLeft = polygon.Polygon(verticiS)
        testRight = polygon.Polygon(verticiD)
        p1 = point.Point()
        p1.setcoordinate(2,1.2)
        p2 = point.Point()
        p2.setcoordinate(4,3)
        cut = segment.Segment()
        cut.setFromPoint(p1,p2)
        prova = cutter.ConvexCutter()
        prova.cutPolygon(test, vertices,cut)
        try:
            right = prova.getPolygon(1)
            left=prova.getPolygon(2)
            for i in range(0,testLeft.numberVertices()-1):
                v1=left.getVertex(i)
                v2=testLeft.getVertex(i)
                self.assertEqual(v1.getX(), v2.getX())
                self.assertEqual(v1.getY(), v2.getY())
                self.assertEqual(v1.Id, v2.Id)
            for i in range(0, testRight.numberVertices() - 1):
                v1=right.getVertex(i)
                v2=testRight.getVertex(i)
                self.assertEqual(v1.getX(),v2.getX())
                self.assertEqual(v1.getY(),v2.getY())
                self.assertEqual(v1.Id,v2.Id)
        except Exception as ex:
            self.fail()

    def testCutterFigure2(self):
        test = []
        vertices=[]
        v= vertex.Vertex()
        p = point.Point()
        p.setcoordinate(1, 1)
        v.setPoint(0,p)
        vertices.append(v)
        test.append(p)
        v = vertex.Vertex()
        p = point.Point()
        p.setcoordinate(5, 1)
        v.setPoint(1, p)
        vertices.append(v)
        test.append(p)
        v = vertex.Vertex()
        p = point.Point()
        p.setcoordinate(5, 3.1)
        v = vertex.Vertex()
        v.setPoint(2, p)
        vertices.append(v)
        test.append(p)
        v = vertex.Vertex()
        p = point.Point()
        p.setcoordinate(1, 3.1)
        v.setPoint(3, p)
        vertices.append(v)
        test.append(p)

        create = []
        v = vertex.Vertex()
        v.setPoint(0, test[0])
        create.append(v)
        p = point.Point()
        p.setcoordinate(2, 1)
        v = vertex.Vertex()
        v.setPoint(4, p)
        create.append(v)
        v = vertex.Vertex()
        v.setPoint(1, test[1])
        create.append(v)
        v = vertex.Vertex()
        v.setPoint(2, test[2])
        create.append(v)
        v = vertex.Vertex()
        v.setPoint(3, test[3])
        create.append(v)

        uguale = polygon.Polygon(create)
        #testLeft = polygon.Polygon()
        p1 = point.Point()
        p1.setcoordinate(2, 1)
        p2 = point.Point()
        p2.setcoordinate(6, 1)
        cut = segment.Segment()
        cut.setFromPoint(p1,p2)
        prova = cutter.ConvexCutter()
        prova.cutPolygon(test, vertices, cut)
        try:
            #left = prova.getPolygon(2)
            left = prova.getPolygon(1)
            #self.assertEqual(left, testLeft)
            for i in range(0, uguale.numberVertices() - 1):
                v1 = left.getVertex(i)
                v2 = uguale.getVertex(i)
                self.assertEqual(v1.getX(), v2.getX())
                self.assertEqual(v1.getY(), v2.getY())
                self.assertEqual(v1.Id, v2.Id)
            self.assertEqual(prova.cambi, 10)
        except Exception as ex:
            self.fail()

    def testCutterFigure3(self):
        test = []
        vertices=[]
        p = point.Point()
        p.setcoordinate(2.5, 1)
        v=vertex.Vertex()
        v.setPoint(0,p)
        vertices.append(v)
        test.append(p)
        p = point.Point()
        p.setcoordinate(4, 2.1)
        v = vertex.Vertex()
        v.setPoint(1, p)
        vertices.append(v)
        test.append(p)
        p = point.Point()
        p.setcoordinate(3.4, 4.2)
        v = vertex.Vertex()
        v.setPoint(2, p)
        vertices.append(v)
        test.append(p)
        p = point.Point()
        p.setcoordinate(1.6, 4.2)
        v = vertex.Vertex()
        v.setPoint(3, p)
        vertices.append(v)
        test.append(p)
        p = point.Point()
        p.setcoordinate(1, 2.1)
        v = vertex.Vertex()
        v.setPoint(4, p)
        vertices.append(v)
        test.append(p)

        verticiS = []
        v = vertex.Vertex()
        v.setPoint(0, test[0])
        verticiS.append(v)
        v = vertex.Vertex()
        v.setPoint(1, test[1])
        verticiS.append(v)
        p = point.Point()
        p.setcoordinate(3.6,2.2)
        v = vertex.Vertex()
        v.setPoint(5, p)
        verticiS.append(v)
        p = point.Point()
        p.setcoordinate(1.4,2.75)
        v = vertex.Vertex()
        v.setPoint(6, p)
        verticiS.append(v)
        p = point.Point()
        p.setcoordinate(1.200000000000000,2.8)
        v = vertex.Vertex()
        v.setPoint(7, p)
        verticiS.append(v)
        v = vertex.Vertex()
        v.setPoint(4, test[4])
        verticiS.append(v)
        verticiD = []
        p = point.Point()
        p.setcoordinate(1.4,2.75)
        v = vertex.Vertex()
        v.setPoint(6, p)
        verticiD.append(v)
        p = point.Point()
        p.setcoordinate(3.6,2.2)
        v = vertex.Vertex()
        v.setPoint(5, p)
        verticiD.append(v)
        v = vertex.Vertex()
        v.setPoint(1, test[1])
        verticiD.append(v)
        v = vertex.Vertex()
        v.setPoint(2, test[2])
        verticiD.append(v)
        v = vertex.Vertex()
        v.setPoint(3, test[3])
        verticiD.append(v)
        p = point.Point()
        p.setcoordinate(1.200000000000000,2.8)
        v = vertex.Vertex()
        v.setPoint(7, p)
        verticiD.append(v)

        testLeft = polygon.Polygon(verticiS)
        testRight = polygon.Polygon(verticiD)
        p1 = point.Point()
        p1.setcoordinate(1.4,2.75)
        p2 = point.Point()
        p2.setcoordinate(3.6,2.2)
        cut = segment.Segment()
        cut.setFromPoint(p1,p2)
        prova = cutter.ConvexCutter()
        prova.cutPolygon(test, vertices, cut)
        try:
            left = prova.getPolygon(2)
            right = prova.getPolygon(1)
            for i in range(0, testLeft.numberVertices() - 1):
                v1 = left.getVertex(i)
                v2 = testLeft.getVertex(i)
                self.assertEqual(v1.getX(), v2.getX())
                self.assertEqual(v1.getY(), v2.getY())
                self.assertEqual(v1.Id, v2.Id)
            for i in range(0, testRight.numberVertices() - 1):
                v1 = right.getVertex(i)
                v2 = testRight.getVertex(i)
                self.assertEqual(v1.getX(), v2.getX())
                self.assertEqual(v1.getY(), v2.getY())
                self.assertEqual(v1.Id, v2.Id)

        except Exception as ex:
            self.fail()


    def testCutterFigure4(self):
        test = []
        vertices=[]
        p = point.Point()
        p.setcoordinate(1.5, 1)
        v=vertex.Vertex()
        v.setPoint(0,p)
        vertices.append(v)
        test.append(p)
        p = point.Point()
        p.setcoordinate(5.6, 1.5)
        v=vertex.Vertex()
        v.setPoint(1,p)
        vertices.append(v)
        test.append(p)
        p = point.Point()
        p.setcoordinate(5.5, 4.8)
        v=vertex.Vertex()
        v.setPoint(2,p)
        vertices.append(v)
        test.append(p)
        p = point.Point()
        p.setcoordinate(4.0, 6.2)
        v=vertex.Vertex()
        v.setPoint(3,p)
        vertices.append(v)
        test.append(p)
        p = point.Point()
        p.setcoordinate(3.2, 4.2)
        v=vertex.Vertex()
        v.setPoint(4,p)
        vertices.append(v)
        test.append(p)
        p = point.Point()
        p.setcoordinate(1.0, 4.0)
        v=vertex.Vertex()
        v.setPoint(5,p)
        vertices.append(v)
        test.append(p)
        p1 = point.Point()
        p1.setcoordinate(2.0,3.7)
        p2 = point.Point()
        p2.setcoordinate(4.1,5.9)
        cut = segment.Segment()
        cut.setFromPoint(p1,p2)

        polygon1 = []
        polygon1.append(vertices[0])
        polygon1.append(vertices[1])
        polygon1.append(vertices[2])
        p = point.Point()
        p.setcoordinate(4.2043269230769225,6.009294871794872)
        v = vertex.Vertex()
        v.setPoint(6, p)
        polygon1.append(v)
        v = vertex.Vertex()
        v.setPoint(7, cut.getTo())
        polygon1.append(v)
        p = point.Point()
        p.setcoordinate(3.721311475409837,5.503278688524592)
        v = vertex.Vertex()
        v.setPoint(8, p)
        polygon1.append(v)
        polygon1.append(vertices[4])
        p = point.Point()
        p.setcoordinate(2.408597285067873,4.128054298642534)
        v = vertex.Vertex()
        v.setPoint(9, p)
        polygon1.append(v)
        v = vertex.Vertex()
        v.setPoint(10,cut.getFrom())
        polygon1.append(v)
        p = point.Point()
        p.setcoordinate(1.1912162162162163, 2.852702702702703)
        v = vertex.Vertex()
        v.setPoint(11, p)
        polygon1.append(v)
        testP1 = polygon.Polygon(polygon1)

        polygon2 = []
        polygon2.append(vertices[3])
        p = point.Point()
        p.setcoordinate(3.721311475409837,5.503278688524592)
        v = vertex.Vertex()
        v.setPoint(8, p)
        polygon2.append(v)
        v = vertex.Vertex()
        v.setPoint(7, cut.getTo())
        polygon2.append(v)
        p = point.Point()
        p.setcoordinate(4.2043269230769225,6.009294871794872)
        v = vertex.Vertex()
        v.setPoint(6, p)
        polygon2.append(v)
        testP2 = polygon.Polygon(polygon2)


        polygon3 = []
        polygon3.append(vertices[5])
        p = point.Point()
        p.setcoordinate(1.1912162162162163,2.852702702702703)
        v = vertex.Vertex()
        v.setPoint(11, p)
        polygon3.append(v)
        v = vertex.Vertex()
        v.setPoint(10, cut.getFrom())
        polygon3.append(v)
        p = point.Point()
        p.setcoordinate(2.408597285067873,4.128054298642534)
        v = vertex.Vertex()
        v.setPoint(9, p)
        polygon3.append(v)
        testP3 = polygon.Polygon(polygon3)

        prova = cutter.ConcaveCutter()
        prova.cutPolygon(test, vertices, cut)
        try:
            find1 = prova.searchPolygon(testP1)
            find2 = prova.searchPolygon(testP2)
            find3 = prova.searchPolygon(testP3)
            self.assertEqual(find1, True)
            self.assertEqual(find2, True)
            self.assertEqual(find3, True)
        except Exception as ex:
            self.fail()



    def testCutterFigure5(self):
        test = []
        vertices=[]
        p = point.Point()
        p.setcoordinate(-5,4)
        v=vertex.Vertex()
        v.setPoint(0,p)
        vertices.append(v)
        test.append(p)
        p = point.Point()
        p.setcoordinate(0,0)
        v = vertex.Vertex()
        v.setPoint(1, p)
        vertices.append(v)
        test.append(p)
        p = point.Point()
        p.setcoordinate(3,0)
        v = vertex.Vertex()
        v.setPoint(2, p)
        vertices.append(v)
        test.append(p)
        p = point.Point()
        p.setcoordinate(-2,4)
        v = vertex.Vertex()
        v.setPoint(3, p)
        vertices.append(v)
        test.append(p)
        p = point.Point()
        p.setcoordinate(3,6)
        v = vertex.Vertex()
        v.setPoint(4, p)
        vertices.append(v)
        test.append(p)
        p = point.Point()
        p.setcoordinate(0,8)
        v = vertex.Vertex()
        v.setPoint(5, p)
        vertices.append(v)
        test.append(p)

        p1 = point.Point()
        p1.setcoordinate(0,0.5)
        p2 = point.Point()
        p2.setcoordinate(0,8)
        cut = segment.Segment()
        cut.setFromPoint(p1,p2)

        polygon1 = []
        polygon1.append(vertices[0])
        polygon1.append(vertices[1])
        v = vertex.Vertex()
        v.setPoint(6, cut.getFrom())
        polygon1.append(v)
        p = point.Point()
        p.setcoordinate(-1.1102230246251565e-15,2.400000000000001)
        v = vertex.Vertex()
        v.setPoint(7, p)
        polygon1.append(v)
        polygon1.append(vertices[3])
        p = point.Point()
        p.setcoordinate(6.661338147750939e-16,4.800000000000001)
        v = vertex.Vertex()
        v.setPoint(8, p)
        polygon1.append(v)
        polygon1.append(vertices[5])
        testP1 = polygon.Polygon(polygon1)

        polygon2 = []
        polygon2.append(vertices[2])
        p = point.Point()
        p.setcoordinate(-1.1102230246251565e-15,2.400000000000001)
        v = vertex.Vertex()
        v.setPoint(7, p)
        polygon2.append(v)
        v = vertex.Vertex()
        v.setPoint(6, cut.getFrom())
        polygon2.append(v)
        polygon2.append(vertices[1])
        testP2 = polygon.Polygon(polygon2)

        polygon3 = []
        polygon3.append(vertices[4])
        polygon3.append(vertices[5])
        p = point.Point()
        p.setcoordinate(6.661338147750939e-16,4.800000000000001)
        v=vertex.Vertex()
        v.setPoint(8, p)
        polygon3.append(v)
        testP3 = polygon.Polygon(polygon3)

        prova = cutter.ConcaveCutter()
        prova.cutPolygon(test, vertices, cut)
        try:
            find1 = prova.searchPolygon(testP1)
            find2 = prova.searchPolygon(testP2)
            find3 = prova.searchPolygon(testP3)
            self.assertEqual(find1, True)
            self.assertEqual(find2, True)
            self.assertEqual(find3, True)
        except Exception as ex:
            self.fail()

    def testCutterFigure6(self):
        test = []
        vertices=[]
        p = point.Point()
        p.setcoordinate(0,0)
        v=vertex.Vertex()
        v.setPoint(0,p)
        vertices.append(v)
        test.append(p)
        p = point.Point()
        p.setcoordinate(0, 8)
        v = vertex.Vertex()
        v.setPoint(1, p)
        vertices.append(v)
        test.append(p)
        p = point.Point()
        p.setcoordinate(5, 8)
        v = vertex.Vertex()
        v.setPoint(2, p)
        vertices.append(v)
        test.append(p)
        p = point.Point()
        p.setcoordinate(-2, 3)
        v = vertex.Vertex()
        v.setPoint(3, p)
        vertices.append(v)
        test.append(p)
        p = point.Point()
        p.setcoordinate(-5, 3)
        v = vertex.Vertex()
        v.setPoint(4, p)
        vertices.append(v)
        test.append(p)
        p = point.Point()
        p.setcoordinate(-5, 6)
        v = vertex.Vertex()
        v.setPoint(5, p)
        vertices.append(v)
        test.append(p)
        p = point.Point()
        p.setcoordinate(-8, 0)
        v = vertex.Vertex()
        v.setPoint(6, p)
        vertices.append(v)
        test.append(p)
        p1 = point.Point()
        p1.setcoordinate(-3,3)
        p2 = point.Point()
        p2.setcoordinate(-4,3)
        cut = segment.Segment()
        cut.setFromPoint(p1,p2)

        polygon1 = []
        polygon1.append(vertices[0])
        p = point.Point()
        p.setcoordinate(0.0,3.000000000000001)
        v = vertex.Vertex()
        v.setPoint(7, p)
        polygon1.append(v)
        polygon1.append(vertices[3])
        v = vertex.Vertex()
        v.setPoint(8, cut.getFrom())
        polygon1.append(v)
        v = vertex.Vertex()
        v.setPoint(9, cut.getTo())
        polygon1.append(v)
        polygon1.append(vertices[4])
        p = point.Point()
        p.setcoordinate(-6.5,3)
        v = vertex.Vertex()
        v.setPoint(10, p)
        polygon1.append(v)
        polygon1.append(vertices[6])
        testP1 = polygon.Polygon(polygon1)

        polygon2 = []
        polygon2.append(vertices[1])
        polygon2.append(vertices[2])
        polygon2.append(vertices[3])
        p = point.Point()
        p.setcoordinate(0.0,3.000000000000001)
        v = vertex.Vertex()
        v.setPoint(7, p)
        polygon2.append(v)
        testP2 = polygon.Polygon(polygon2)

        polygon3 = []
        polygon3.append(vertices[5])
        p = point.Point()
        p.setcoordinate(-6.5, 3)
        v = vertex.Vertex()
        v.setPoint(10, p)
        polygon3.append(v)
        polygon3.append(vertices[4])
        testP3 = polygon.Polygon(polygon3)


        prova = cutter.ConcaveCutter()
        prova.cutPolygon(test, vertices, cut)
        try:
            find1 = prova.searchPolygon(testP1)
            find2 = prova.searchPolygon(testP2)
            find3 = prova.searchPolygon(testP3)
            self.assertEqual(find1, True)
            self.assertEqual(find2, True)
            self.assertEqual(find3, True)
        except Exception as ex:
            self.fail()

    def testAggiuntivo1(self):
        test = []
        vertices=[]
        p = point.Point()
        p.setcoordinate(2,-2)
        v=vertex.Vertex()
        v.setPoint(0,p)
        vertices.append(v)
        test.append(p)
        p = point.Point()
        p.setcoordinate(0, -1)
        v = vertex.Vertex()
        v.setPoint(1, p)
        vertices.append(v)
        test.append(p)
        p = point.Point()
        p.setcoordinate(3,1)
        v = vertex.Vertex()
        v.setPoint(2, p)
        vertices.append(v)
        test.append(p)
        p = point.Point()
        p.setcoordinate(0,2)
        v = vertex.Vertex()
        v.setPoint(3, p)
        vertices.append(v)
        test.append(p)
        p = point.Point()
        p.setcoordinate(3,2)
        v = vertex.Vertex()
        v.setPoint(4, p)
        vertices.append(v)
        test.append(p)
        p = point.Point()
        p.setcoordinate(3,3)
        v = vertex.Vertex()
        v.setPoint(5, p)
        vertices.append(v)
        test.append(p)
        p = point.Point()
        p.setcoordinate(-1,3)
        v = vertex.Vertex()
        v.setPoint(6, p)
        vertices.append(v)
        test.append(p)
        p = point.Point()
        p.setcoordinate(-3,1)
        v = vertex.Vertex()
        v.setPoint(7, p)
        vertices.append(v)
        test.append(p)
        p = point.Point()
        p.setcoordinate(0,0)
        v = vertex.Vertex()
        v.setPoint(8, p)
        vertices.append(v)
        test.append(p)
        p = point.Point()
        p.setcoordinate(-3,-2)
        v = vertex.Vertex()
        v.setPoint(9, p)
        vertices.append(v)
        test.append(p)

        p1 = point.Point()
        p1.setcoordinate(0, -3)
        p2 = point.Point()
        p2.setcoordinate(0, 4)
        cut = segment.Segment()
        cut.setFromPoint(p1,p2)

        polygon1 = []
        polygon1.append(vertices[0])
        polygon1.append(vertices[1])
        p = point.Point()
        p.setcoordinate(4.440892098500626e-16,-2)
        v = vertex.Vertex()
        v.setPoint(10, p)
        polygon1.append(v)
        testP1= polygon.Polygon(polygon1)

        polygon2 = []
        polygon2.append(vertices[2])
        polygon2.append(vertices[3])
        polygon2.append(vertices[8])
        polygon2.append(vertices[1])
        testP2 = polygon.Polygon(polygon2)

        polygon3 = []
        polygon3.append(vertices[4])
        polygon3.append(vertices[5])
        p = point.Point()
        p.setcoordinate(-4.440892098500626e-16,3.0)
        v = vertex.Vertex()
        v.setPoint(11, p)
        polygon3.append(v)
        polygon3.append(vertices[3])
        testP3 = polygon.Polygon(polygon3)

        polygon4 = []
        polygon4.append(vertices[6])
        polygon4.append(vertices[7])
        polygon4.append(vertices[8])
        polygon4.append(vertices[3])
        p = point.Point()
        p.setcoordinate(-4.440892098500626e-16, 3.0)
        v = vertex.Vertex()
        v.setPoint(11, p)
        polygon4.append(v)
        testP4 = polygon.Polygon(polygon4)

        polygon5 = []
        polygon5.append(vertices[9])
        p = point.Point()
        p.setcoordinate(4.440892098500626e-16,-2)
        v = vertex.Vertex()
        v.setPoint(10, p)
        polygon5.append(v)
        polygon5.append(vertices[1])
        polygon5.append(vertices[8])
        testP5 = polygon.Polygon(polygon5)

        prova = cutter.ConcaveCutter()
        prova.cutPolygon(test, vertices, cut)
        try:
            find1 = prova.searchPolygon(testP1)
            find2 = prova.searchPolygon(testP2)
            find3 = prova.searchPolygon(testP3)
            find4 = prova.searchPolygon(testP4)
            find5 = prova.searchPolygon(testP5)
            self.assertEqual(find1, True)
            self.assertEqual(find2, True)
            self.assertEqual(find3, True)
            self.assertEqual(find4, True)
            self.assertEqual(find5, True)
        except Exception as ex:
            self.fail()


